<!-- sections/product-modal.liquid -->
<div class="pg-modal" id="pgModal" aria-hidden="true">
  <div class="pg-modal__content" role="dialog" aria-modal="true">
    <button class="pg-modal__close" id="pgClose" aria-label="Close">&times;</button>

    <div class="pg-modal__product">
      <div class="pg-modal__image"><img id="pgImg" src="" alt=""></div>
      <div class="pg-modal__details">
        <h2 id="pgTitle"></h2>
        <div id="pgPrice" class="pg-price"></div>
        <p id="pgDesc" class="pg-desc"></p>

        <div class="pg-section" id="pgColorWrap" style="display:none;">
          <div class="pg-label">Color</div>
          <div class="pg-colors" id="pgColors"></div>
        </div>

        <div class="pg-section" id="pgSizeWrap" style="display:none;">
          <div class="pg-label">Size</div>
          <div class="pg-size-row">
            <select id="pgVariant" class="pg-select">
              <option value="">Choose your size</option>
            </select>
          </div>
        </div>

        <button class="pg-add" id="pgAdd">ADD TO CART <span aria-hidden="true">→</span></button>
        <div class="pg-frame">Frame 1000009756</div>
      </div>
    </div>
  </div>
</div>

<style>
/* Base modal */
.pg-modal{position:fixed;inset:0;background:rgba(0,0,0,.8);display:flex;align-items:center;justify-content:center;z-index:1000;opacity:0;visibility:hidden;transition:.3s}
.pg-modal.active{opacity:1;visibility:visible}
.pg-modal__content{background:#fff;border-radius:8px;max-width:560px;width:92%;max-height:90vh;overflow:auto;position:relative;transform:translateY(28px);transition:transform .3s}
.pg-modal.active .pg-modal__content{transform:translateY(0)}
.pg-modal__close{position:absolute;top:12px;right:14px;background:none;border:0;font-size:24px;cursor:pointer}

/* Layout */
.pg-modal__product{display:grid;grid-template-columns:140px 1fr;gap:18px;padding:18px 22px 22px}
.pg-modal__image img{width:140px;height:140px;object-fit:cover;border-radius:4px}

/* Typography */
#pgTitle{font-size:34px;line-height:1.05;font-weight:800;margin:2px 0 8px}
.pg-price{font-size:22px;font-weight:700;margin:4px 0 10px}
.pg-desc{font-size:16px;color:#333;line-height:1.5;margin:0 0 12px;max-width:470px}

/* Labels */
.pg-label{font-size:16px;font-weight:600;color:#333;margin:14px 0 8px}

/* Color segmented control */
#pgColorWrap{margin-bottom:10px}
.pg-colors{display:flex;border:1px solid #111;border-radius:2px;overflow:hidden}
.pg-color-btn{flex:1;padding:12px 18px;background:#fff;border:0;border-right:1px solid #111;cursor:pointer;font-size:16px;color:#111;transition:background .2s,color .2s}
.pg-color-btn:last-child{border-right:0}
.pg-color-btn.active{background:#000;color:#fff}

/* Size select with square chevron box */
.pg-size-row{position:relative}
.pg-select{width:100%;padding:14px 52px 14px 16px;font-size:16px;border:1px solid #111;border-radius:2px;appearance:none;background:#fff}
.pg-size-row::after{content:"";position:absolute;top:0;right:0;width:52px;height:100%;border-left:1px solid #111;background:#fff}
.pg-size-row::before{content:"▾";position:absolute;right:16px;top:50%;transform:translateY(-50%);font-size:18px;pointer-events:none;color:#111}

/* Add to cart bar */
.pg-add{margin-top:16px;width:100%;padding:16px 20px;border-radius:0;background:#000;color:#fff;font-weight:800;letter-spacing:.02em;display:flex;align-items:center;justify-content:center;gap:14px;border:0;cursor:pointer}
.pg-add:hover{background:#111}
.pg-add span{font-size:18px}

/* Footer small text */
.pg-frame{position:absolute;bottom:10px;left:22px;color:#999;font-size:11px}

/* Responsive */
@media (max-width:540px){
  .pg-modal__product{grid-template-columns:1fr}
  .pg-modal__image img{width:100%;height:200px;border-radius:6px 6px 0 0}
  #pgTitle{font-size:28px}
  .pg-price{font-size:20px}
}
</style>

<script>
/* Build product data from selected products (blocks) */
window.pgProducts = [
  {% for block in section.blocks %}
    {% assign p = block.settings.product %}
    {% if p %}
    {
      id: {{ p.id | json }},
      title: {{ p.title | json }},
      description: {{ p.description | strip_html | json }},
      price_html: {{ p.price | money | json }},
      price_min_html: {{ p.price_min | money | json }},
      price_varies: {{ p.price_varies | json }},
      image: {{ p.featured_image | image_url: width: 900 | json }},
      image_alt: {{ p.featured_image.alt | default: p.title | json }},
      options: {{ p.options | json }},
      variants: [
        {% for v in p.variants %}
        {
          id: {{ v.id | json }},
          title: {{ v.title | json }},
          available: {{ v.available | json }},
          price_html: {{ v.price | money | json }},
          option1: {{ v.option1 | json }},
          option2: {{ v.option2 | json }},
          option3: {{ v.option3 | json }}
        }{% unless forloop.last %},{% endunless %}
        {% endfor %}
      ]
    }{% unless forloop.last %},{% endunless %}
    {% endif %}
  {% endfor %}
];

(function(){
  const modal = document.getElementById('pgModal');
  const closeBtn = document.getElementById('pgClose');
  const img = document.getElementById('pgImg');
  const title = document.getElementById('pgTitle');
  const price = document.getElementById('pgPrice');
  const desc = document.getElementById('pgDesc');
  const colorWrap = document.getElementById('pgColorWrap');
  const colorsEl = document.getElementById('pgColors');
  const sizeWrap = document.getElementById('pgSizeWrap');
  const variantSel = document.getElementById('pgVariant');
  const addBtn = document.getElementById('pgAdd');

  let current=null, selectedColor=null, colorIndex=-1, sizeIndex=-1;

  function renderColors(p){
    colorsEl.innerHTML='';
    colorIndex = (p.options||[]).findIndex(o=>/color/i.test(o));
    if(colorIndex===-1){ colorWrap.style.display='none'; selectedColor=null; return; }
    const set = new Set((p.variants||[]).map(v=>v['option'+(colorIndex+1)]).filter(Boolean));
    const values=[...set];
    colorWrap.style.display = values.length ? 'block' : 'none';
    selectedColor = values[0] || null;
    values.forEach(val=>{
      const b=document.createElement('button');
      b.type='button'; b.className='pg-color-btn'+(val===selectedColor?' active':'');
      b.textContent=val;
      b.addEventListener('click',()=>{ selectedColor=val; document.querySelectorAll('.pg-color-btn').forEach(x=>x.classList.toggle('active',x===b)); renderSizes(p); });
      colorsEl.appendChild(b);
    });
  }

  function renderSizes(p){
    variantSel.innerHTML = '<option value="">Choose your size</option>';
    sizeIndex = (p.options||[]).findIndex(o=>/size/i.test(o));
    let pool = p.variants||[];
    if(colorIndex>-1 && selectedColor){
      pool = pool.filter(v=>v['option'+(colorIndex+1)]===selectedColor);
    }
    const hasSize = sizeIndex>-1;
    sizeWrap.style.display = hasSize ? 'block' : 'none';

    if(hasSize){
      const label = 'option'+(sizeIndex+1);
      const bySize = new Map();
      pool.forEach(v=>{
        const key = v[label] || v.title;
        if(!bySize.has(key)) bySize.set(key, v);
        else if(!bySize.get(key).available && v.available) bySize.set(key, v);
      });
      [...bySize.entries()].forEach(([name,v])=>{
        const opt=document.createElement('option');
        opt.value=v.id;
        opt.textContent = name + ' — ' + v.price_html + (v.available?'':' (Sold out)');
        opt.disabled=!v.available;
        variantSel.appendChild(opt);
      });
    } else {
      const first = pool.find(v=>v.available) || pool[0];
      if(first){
        const opt=document.createElement('option');
        opt.value=first.id; opt.textContent=first.title; variantSel.appendChild(opt);
        variantSel.value = first.id;
      }
    }
  }

  window.openModal = function(i){
    const p = (window.pgProducts||[])[i]; if(!p) return;
    current = p;
    img.src = p.image || ''; img.alt = p.image_alt || p.title || '';
    title.textContent = p.title || '';
    price.textContent = p.price_varies ? ('From ' + (p.price_min_html||'')) : (p.price_html||'');
    desc.textContent = p.description || '';
    renderColors(p);
    renderSizes(p);
    modal.classList.add('active');
    document.body.style.overflow='hidden';
  };

  function close(){ modal.classList.remove('active'); document.body.style.overflow='auto'; }
  closeBtn.addEventListener('click', close);
  modal.addEventListener('click', e=>{ if(e.target===modal) close(); });
  document.addEventListener('keydown', e=>{ if(e.key==='Escape') close(); });

  addBtn.addEventListener('click', async ()=>{
    if(!current) return;
    let variantId = variantSel.value ? Number(variantSel.value) :
                    Number((current.variants||[]).find(v=>v.available)?.id || current.variants?.[0]?.id || 0);
    if(!variantId){ alert('This product is unavailable.'); return; }
    try{
      await fetch('/cart/add.js',{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify({id:variantId,quantity:1})});
      alert('Added to cart!');
      close();
    }catch{ alert('Could not add to cart.'); }
  });
})();
</script>

{% schema %}
{
  "name": "Product Modal",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        { "type": "product", "id": "product", "label": "Select product" }
      ]
    }
  ],
  "max_blocks": 24,
  "presets": [{ "name": "Product Modal" }]
}
{% endschema %}
